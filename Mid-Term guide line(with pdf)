1. 다항식 덧셈 (연결 리스트)
이 문제는 6장 연결리스트 I (6.연결리스트I.pdf) PDF 자료를 참고하시면 됩니다.

다항식 표현 개념: 44페이지에서 연결 리스트로 다항식을 어떻게 표현하는지 설명합니다 .

노드 구조체 정의: 45페이지에서 다항식 항을 저장하기 위한 ListNode 구조체 (coef, expon, link) 정의를 볼 수 있습니다 .

리스트 헤더 구조체 (ListType): 51페이지에서 다항식 전체를 관리하는 ListType 구조체 (size, head, tail) 정의가 나옵니다.

insert_last 함수: 52페이지에서 리스트 끝에 항을 추가하는 insert_last 함수의 구현을 확인할 수 있습니다 . tail 포인터를 사용하는 방식입니다.

poly_add 함수: 53~54페이지에서 두 다항식을 더하는 poly_add 함수의 핵심 로직과 구현 코드를 볼 수 있습니다 . 두 포인터(a, b)를 이동시키며 지수를 비교하는 방식입니다.

Notes 함수: 52페이지에서 ListType 구조체를 생성하고 초기화하는 함수 구현이 있습니다 .

poly_print 함수: 54페이지에서 다항식을 출력하는 함수 구현을 참고할 수 있습니다 (문제 형식에 맞게 수정 필요) .

2. 연결 큐 구현
이 문제는 7장 연결 리스트 II (7.연결리스트II.pdf) PDF 자료를 참고하시면 됩니다.

연결 큐 개념: 39페이지에서 front와 rear 포인터를 사용하는 연결 큐의 기본 구조를 설명합니다 .

노드 및 큐 타입 구조체: 40페이지에서 QueueNode와 LinkedQueueType 구조체 정의를 확인할 수 있습니다 .

enqueue 함수: 41~42페이지에서 큐의 뒤쪽(rear)에 노드를 추가하는 enqueue 함수의 그림 설명과 구현 코드를 볼 수 있습니다 .

dequeue 함수: 43~44페이지에서 큐의 앞쪽(front)에서 노드를 제거하는 dequeue 함수의 그림 설명과 구현 코드를 볼 수 있습니다 .

is_empty 함수: enqueue (42페이지 )나 dequeue (44페이지 ) 함수 코드 내에서 front가 NULL인지 확인하는 방식으로 구현 로직을 참고할 수 있습니다.

init 함수: enqueue나 dequeue 전에 큐를 초기화하는 과정이 필요하며, 일반적으로 front와 rear를 NULL로 설정합니다 (PDF 코드에는 명시적 init 함수가 없지만, 42, 44페이지 코드에서 초기 상태를 유추할 수 있습니다).

3. 연결 스택 구현
이 문제도 7장 연결 리스트 II (7.연결리스트II.pdf) PDF 자료를 참고하시면 됩니다.

연결 스택 개념: 30페이지에서 배열 스택과 비교하며 연결 스택의 구조를 보여줍니다 .

노드 및 스택 타입 구조체: 31, 32, 35페이지에서 StackNode와 LinkedStackType 구조체 정의를 확인할 수 있습니다.

push 함수: 33페이지(그림 설명)와 36페이지(코드)에서 스택의 맨 위(top)에 노드를 추가하는 push 함수의 구현을 볼 수 있습니다 .

pop 함수: 34페이지(그림 설명)와 37페이지(코드)에서 스택의 맨 위(top) 노드를 제거하는 pop 함수의 구현을 볼 수 있습니다 .

is_empty 함수: 36페이지에서 top이 NULL인지 확인하는 is_empty 함수 코드를 볼 수 있습니다 .


init 함수: 35페이지에서 top을 NULL로 설정하는 init 함수 코드를 볼 수 있습니다 .

print_stack 함수: 36페이지에서 스택 내용을 출력하는 print_stack 함수 코드를 확인할 수 있습니다 .
