#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_STACK_SIZE 100

typedef int element;
element data[MAX_STACK_SIZE]; // 스택의 데이터를 저장할 전역 배열
int top;                      // 스택의 가장 위 요소를 가리키는 전역 변수

/**
 * @brief 스택을 초기화하는 함수.
 * @details 스택을 사용하기 전, 비어있는 상태로 만들어줍니다.
 * top을 -1로 설정하는데, 이는 배열의 유효한 인덱스(0)보다 하나 낮은 값이므로
 * 스택에 아무런 데이터가 없음을 의미하는 값으로 사용됩니다.
 */
void init_stack() {
    top = -1;
}

/**
 * @brief 스택이 비어있는지 확인하는 함수.
 * @return 스택이 비어있으면 1(true), 아니면 0(false).
 * @details top이 초기값인 -1과 같다면, 스택에 아무 요소도 없는 것입니다.
 */
int is_empty() {
    return (top == -1);
}

/**
 * @brief 스택이 가득 찼는지 확인하는 함수.
 * @return 스택이 가득 찼으면 1(true), 아니면 0(false).
 * @details top이 배열의 마지막 인덱스(MAX_STACK_SIZE - 1)에 도달했다면,
 * 더 이상 추가할 공간이 없으므로 스택은 가득 찬 상태입니다.
 */
int is_full() {
    return (top == MAX_STACK_SIZE - 1);
}

/**
 * @brief 스택에 저장된 요소의 개수를 반환하는 함수.
 * @return 스택의 현재 크기.
 * @details top은 0부터 시작하는 인덱스이므로, 요소의 개수는 항상 top + 1 입니다.
 * 예를 들어, top이 -1이면 0개, top이 0이면 1개의 요소가 있는 것입니다.
 */
int size() {
    return top + 1;
}

/**
 * @brief 스택의 가장 위에 새로운 요소를 추가하는 함수 (push 연산).
 * @param item 스택에 추가할 정수 요소.
 * @details 스택이 가득 차 있지 않을 때만 요소를 추가합니다.
 */
void push(element item)
{
    // is_full() 함수를 호출하여 스택이 가득 찼는지 먼저 확인합니다.
    if (is_full())
    {
        // 스택이 가득 찼다면, 문제의 조건에 따라 아무 작업도 수행하지 않고 함수를 종료합니다.
        return;
    }
    // 스택에 여유 공간이 있다면
    else
    {
        // top을 먼저 1 증가시켜 새로운 요소가 들어갈 위치를 가리키게 한 후,
        // 그 위치(data[++top])에 전달받은 item을 저장합니다.
        data[++top] = item;
    }
}

/**
 * @brief 스택의 가장 위에서 요소를 제거하고 그 값을 반환하는 함수 (pop 연산).
 * @return 스택에서 제거된 요소. 스택이 비어있으면 -1을 반환.
 * @details 스택에서 데이터를 꺼내면서, 스택의 크기도 1 줄어듭니다.
 */
element pop()
{
    // is_empty() 함수를 호출하여 스택이 비어있는지 먼저 확인합니다.
    if (is_empty())
    {
        // 스택이 비어있다면, 문제의 조건에 따라 -1을 반환합니다.
        return -1;
    }
    // 스택에 요소가 있다면
    // 현재 top이 가리키는 위치의 데이터를 반환한 후, top의 값을 1 감소시킵니다.
    // 후위 연산자(top--)를 사용해 반환이 먼저 일어나고 top 값 변경이 나중에 일어납니다.
    return data[top--];
}

/**
 * @brief 스택의 가장 위에 있는 요소를 제거하지 않고 값만 확인하는 함수 (peek 연산).
 * @return 스택의 가장 위에 있는 요소. 스택이 비어있으면 -1을 반환.
 * @details pop과 달리 top의 값은 변경되지 않아 스택의 크기가 유지됩니다.
 */
element peek()
{
    // is_empty() 함수를 호출하여 스택이 비어있는지 먼저 확인합니다.
    if (is_empty())
    {
        // 스택이 비어있다면, 문제의 조건에 따라 -1을 반환합니다.
        return -1;
    }
    // 스택에 요소가 있다면
    // 현재 top이 가리키는 위치의 데이터를 그대로 반환합니다.
    return data[top];
}

int main(void)
{
    element num;
    int n;
    char c[10];
    scanf("%d", &n);
    init_stack();
    for (int i = 0; i < n; i++)
    {
        scanf("%s", c);

        if (strcmp(c, "push") == 0)
        {
            scanf("%d\n", &num);
            push(num);
        }
        else if (strcmp(c, "pop") == 0)
            printf("%d\n", pop());
        else if (strcmp(c, "size") == 0)
            printf("%d\n", size());
        else if (strcmp(c, "empty") == 0)
            printf("%d\n", is_empty());
        else if (strcmp(c, "peek") == 0)
            printf("%d\n", peek());
        else
            printf("error\n");
    }
    return 0;
}
