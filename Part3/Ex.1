#include <stdio.h>
#include <stdlib.h> // malloc, free, exit 함수를 사용하기 위해 포함

// 다항식의 한 항(term)을 나타내는 구조체 정의
// 예를 들어 3x^5 이라는 항이 있다면, 계수(coef)는 3, 차수(expon)는 5가 돼.
typedef struct {
    float coef;   // 항의 계수 (예: 3.0) - 실수형
    int expon;    // 항의 차수 (예: 5) - 정수형
} Term;

/**
 * @brief 다항식을 출력하는 함수
 * @param t     항들을 담고 있는 배열 (Term 구조체들의 배열)
 * @param size  배열의 길이 (총 몇 개의 항이 있는지)
 *
 * 이 함수는 Term 구조체 배열을 받아서 다항식 형태로 예쁘게 출력해줘.
 * 예: 3.000000 x^5 + 2.000000 x^2 + 1.000000 x^0
 */
void print_poly(const Term *t, int size) {
    // To Fill
    int is_first_term = 1; // 지금 출력하려는 항이 첫 번째 항인지 확인하는 변수 (1이면 첫 번째, 0이면 아님)
                           // 첫 번째 항 앞에는 "+" 기호를 붙이지 않기 위해 사용해.

    // 배열의 처음부터 끝까지(size 만큼) 반복하면서 각 항을 확인
    for (int i = 0; i < size; i++) {
        // 현재 항의 계수(t[i].coef)가 0이 아닐 때만 출력 (계수가 0인 항은 생략!)
        if (t[i].coef != 0.0) {
            // is_first_term이 0이면 (즉, 첫 번째 항이 아니면)
            // 항 앞에 " + " 기호를 출력해서 항들을 연결해줘.
            if (!is_first_term) {
                printf(" + ");
            }
            // "%f x^%d" 형식에 맞춰서 계수(실수)와 차수(정수)를 출력
            // 예: 3.140000 x^2
            printf("%f x^%d", t[i].coef, t[i].expon);

            // 첫 번째 항을 출력했으니, 다음 항부터는 첫 번째 항이 아니므로 0으로 바꿔줘.
            is_first_term = 0;
        }
    }
    printf("\n"); // 다항식 출력이 끝나면 줄바꿈 문자(\n)를 출력해서 다음 출력과 섞이지 않게 해줘.
}

int main(void) {
    Term *a;      // 다항식의 항들을 저장할 배열을 가리킬 포인터 변수 a 선언. (나중에 동적 메모리를 가리킬 거야)
    int size;     // 다항식에 몇 개의 항이 있는지 저장할 변수

    // 1) 사용자로부터 항의 개수를 입력받고, 제대로 입력되었는지 확인
    // scanf가 1개의 정수를 성공적으로 읽었는지 (!= 1), 그리고 그 개수가 0보다 큰지 확인
    if (scanf("%d", &size) != 1 || size <= 0) {
        // 입력이 잘못되면 오류 메시지를 출력하고 프로그램 종료
        fprintf(stderr, "올바른 항 개수를 입력하세요.\n");
        return 1; // 오류가 발생했음을 운영체제에 알림 (보통 0이 아니면 오류)
    }

    // 2) 동적 메모리 할당: 입력받은 항의 개수(size)만큼 메모리 공간을 빌려오는 과정
    // To FILL
    // malloc 함수를 사용해서 메모리를 빌려와.
    // 필요한 크기 = (하나의 Term 구조체 크기) * (항의 개수 size)
    // malloc은 어떤 타입의 메모리를 빌려줄지 모르므로, (Term *)를 앞에 붙여서
    // "이 메모리는 Term 구조체들을 저장하는 데 사용할 거야"라고 알려줘 (형변환).
    // (3.배열구조체포인터.pdf p.43 MALLOC.C 예제 참고)
    a = (Term *)malloc(size * sizeof(Term));

    // malloc이 메모리를 빌려오는데 실패하면 NULL을 반환해. (메모리가 부족할 때 등)
    // 그래서 a가 NULL인지 확인해서, 실패했다면 오류 메시지를 출력하고 종료해야 해.
    if (a == NULL) { // 메모리 할당 실패 시 오류 처리
        fprintf(stderr, "메모리 할당 실패\n");
        return 1; // 오류 종료
    }


    // 3) 각 항의 차수와 계수 입력받기
    // To FILL
    // for 반복문을 사용해서 size번 만큼 반복
    for (int i = 0; i < size; i++) {
        // 사용자로부터 i번째 항의 차수(정수 %d)와 계수(실수 %f)를 순서대로 입력받아
        // 동적 할당된 배열 a의 i번째 요소(구조체)의 expon과 coef 멤버에 저장해.
        // scanf가 2개의 값을 성공적으로 읽었는지 확인 (!= 2)
        if (scanf("%d %f", &a[i].expon, &a[i].coef) != 2) {
             // 입력 형식이 잘못되면 오류 메시지 출력
             fprintf(stderr, "항 입력 오류.\n");
             // 빌려온 메모리(a)를 반납하고 프로그램 종료 (메모리 누수 방지!)
             free(a);
             return 1; // 오류 종료
        }
    }


    // 4) 다항식 출력 함수 호출
    // 위에서 입력받은 항들이 저장된 배열 a와 항의 개수 size를 전달해서 다항식 출력
    print_poly(a, size);

    // 5) 메모리 반환: 빌려왔던 메모리를 운영체제에 돌려주는 과정
    // free 함수를 사용해서 malloc으로 빌려왔던 메모리 공간(a가 가리키는 곳)을 반납해.
    // 이걸 안 하면 메모리 누수(memory leak)가 발생해서 프로그램이 점점 느려지거나 멈출 수 있어!
    // (3.배열구조체포인터.pdf p.43 MALLOC.C 예제 참고)
    free(a);
    return 0; // 프로그램 정상 종료
}
