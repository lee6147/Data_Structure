// ===========원형큐 코드 시작===========
#define MAX_QUEUE_SIZE 5
typedef int element;
typedef struct {
	//큐 타입
	element data[MAX_QUEUE_SIZE];
	int front, rear;
}QueueType;

//오류 함수
void error(char* message)
{
	fprintf(stderr, "%s\n", message); // <-- 'fprintf'로 수정
	exit(1);
}

// 큐 초기화 함수 (주석 수정)
void init_queue(QueueType* q)
{
	q->front = q->rear = 0;
}

// 공백 상태 검출 함수 (로직 수정)
int is_empty(QueueType* q)
{
	return (q->front == q->rear); // <-- 'front == rear'로 수정
}

// 포화 상태 검출 함수 (새로 추가)
int is_full(QueueType* q)
{
	return ((q->rear + 1) % MAX_QUEUE_SIZE == q->front);
}


//원형큐 출력 함수
void queue_print(QueueType* q)
{
	printf("Queue(front=%d rear=%d) =", q->front, q->rear); // <-- 'printf'로 수정
	if (!is_empty(q)) {
		int i = q->front;
		do {
			i = (i + 1) % (MAX_QUEUE_SIZE);
			printf("%d | ", q->data[i]);
			if (i == q->rear)
				break;
		} while (i != q->front);
	}
	printf("\n");
}

//삽입 함수 (enqueue는 하나만 필요)
void enqueue(QueueType* q, element item)
{
	if (is_full(q))
		error("큐가 포화상태 입니다.");
	q->rear = (q->rear + 1) % MAX_QUEUE_SIZE;
	q->data[q->rear] = item;
}

// 삭제 함수 (두 번째 enqueue를 dequeue로 수정)
int dequeue(QueueType* q)
{
	if (is_empty(q)) { // <-- is_full을 is_empty로 수정
		error("큐가 공백 상태입니다."); // <-- 메시지 수정
		return -1; // <-- 오류 시 반환
	}
	q->front = (q->front + 1) % MAX_QUEUE_SIZE;
	return q->data[q->front];
}


int main(void)
{
	QueueType queue;
	int element;
	init_queue(&queue);
	printf("--데이터 추가 단계--\n");
	while (!is_full(&queue))
	{
		printf("정수를 입력하시오:");
		scanf_s("%d", &element);
		enqueue(&queue, element);
		queue_print(&queue);
	}
	printf("큐는 포화상태.\n\n");

	printf("--데이터 삭제 단계--\n");
	while (!is_empty(&queue))
	{
		element = dequeue(&queue); // <-- 올바르게 dequeue 호출
		printf("꺼내진 정수: %d\n", element);
		queue_print(&queue);
	}
	printf("큐는 공백 상태\n");
	return 0;
}
